---
- name: Uninstall old versions of docker
  become: yes
  ansible.builtin.apt:
    name: ['docker', 'docker-engine', 'docker.io']
    state: absent

- name: Install dependencies
  become: yes
  ansible.builtin.apt:
    name: ['apt-transport-https', 'ca-certificates', 'curl', 'python-setuptools', 'software-properties-common']
    state: latest
    install_recommends: no
    update_cache: yes
  environment: "{{ proxy_env }}"

- name: Add Docker apt repository key
  become: yes
  ansible.builtin.apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present
  environment: "{{ proxy_env }}"

- name: Add Docker apt repository and update apt cache
  become: yes
  ansible.builtin.apt_repository:
    repo: "deb https://download.docker.com/linux/{{ ansible_distribution|lower }} {{ ansible_distribution_release }} stable"
    mode: '644'
    update_cache: yes
    state: present
  environment: "{{ proxy_env }}"

- name: Install docker
  become: yes
  ansible.builtin.apt:
    name: ['docker-ce', 'docker-ce-cli', 'containerd.io']
    state: latest
    install_recommends: no
    update_cache: yes
  environment: "{{ proxy_env }}"

- name: Install docker-compose
  become: yes
  ansible.builtin.pip:
    name: ['docker-compose']
    state: latest
  environment: "{{ proxy_env }}"

#   #
# # Make sure systemd directory exists
# - name: Make sure that systemd directory exists
#   file:
#     path: '/etc/systemd/system'
#     state: 'directory'
#     owner: 'root'
#     group: 'root'
#     mode: '0777'

# # Make sure docker.service.d directory exists
# - name: Make sure that docker.service.d directory exists
#   file:
#     path: '/etc/systemd/system/docker.service.d'
#     state: 'directory'
#     owner: 'root'
#     group: 'root'
#     mode: '0755'
#   become: yes

# # Configure Docker system proxy
# - name: Configure Docker proxy
#   template:
#     src: 'http-proxy.conf.j2'
#     dest: '/etc/systemd/system/docker.service.d/http-proxy.conf'
#     owner: 'root'
#     group: 'root'
#     mode: '0755'
#   when: (ansible_service_mgr == 'systemd' and
#         (proxy_env.http_proxy is defined or proxy_env.https_proxy is defined))
#   become: yes

# Restart systemd daemons
- name: Reload systemd daemons
  command: systemctl daemon-reload
  become: yes

# Restart Docker daemon
- name: Restart docker daemon
  command: systemctl restart docker
  become: yes

# Restart Docker daemon
- name: Restart docker
  service:
    name: docker
    state: restarted
  become: yes

